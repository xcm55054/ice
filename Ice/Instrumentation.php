<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `Instrumentation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/EndpointF.php';
    require_once 'Ice/ConnectionF.php';
    require_once 'Ice/Current.php';
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_Observer;
    interface Observer
    {
        public function attach();
        public function detach();
        public function failed($exceptionName);
    }
    $Ice_Instrumentation__t_Observer = IcePHP_defineClass('::Ice::Instrumentation::Observer', '\\Ice\\Instrumentation\\Observer', -1, false, true, null, null);
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_ThreadState;
    class ThreadState
    {
        const ThreadStateIdle = 0;
        const ThreadStateInUseForIO = 1;
        const ThreadStateInUseForUser = 2;
        const ThreadStateInUseForOther = 3;
    }

    $Ice_Instrumentation__t_ThreadState = IcePHP_defineEnum('::Ice::Instrumentation::ThreadState', array('ThreadStateIdle', 0, 'ThreadStateInUseForIO', 1, 'ThreadStateInUseForUser', 2, 'ThreadStateInUseForOther', 3));
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_ThreadObserver;
    interface ThreadObserver extends \Ice\Instrumentation\Observer
    {
        public function stateChanged($oldState, $newState);
    }
    $Ice_Instrumentation__t_ThreadObserver = IcePHP_defineClass('::Ice::Instrumentation::ThreadObserver', '\\Ice\\Instrumentation\\ThreadObserver', -1, false, true, null, null);
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_ConnectionState;
    class ConnectionState
    {
        const ConnectionStateValidating = 0;
        const ConnectionStateHolding = 1;
        const ConnectionStateActive = 2;
        const ConnectionStateClosing = 3;
        const ConnectionStateClosed = 4;
    }

    $Ice_Instrumentation__t_ConnectionState = IcePHP_defineEnum('::Ice::Instrumentation::ConnectionState', array('ConnectionStateValidating', 0, 'ConnectionStateHolding', 1, 'ConnectionStateActive', 2, 'ConnectionStateClosing', 3, 'ConnectionStateClosed', 4));
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_ConnectionObserver;
    interface ConnectionObserver extends \Ice\Instrumentation\Observer
    {
        public function sentBytes($num);
        public function receivedBytes($num);
    }
    $Ice_Instrumentation__t_ConnectionObserver = IcePHP_defineClass('::Ice::Instrumentation::ConnectionObserver', '\\Ice\\Instrumentation\\ConnectionObserver', -1, false, true, null, null);
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_DispatchObserver;
    interface DispatchObserver extends \Ice\Instrumentation\Observer
    {
        public function userException();
        public function reply($size);
    }
    $Ice_Instrumentation__t_DispatchObserver = IcePHP_defineClass('::Ice::Instrumentation::DispatchObserver', '\\Ice\\Instrumentation\\DispatchObserver', -1, false, true, null, null);
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_ChildInvocationObserver;
    interface ChildInvocationObserver extends \Ice\Instrumentation\Observer
    {
        public function reply($size);
    }
    $Ice_Instrumentation__t_ChildInvocationObserver = IcePHP_defineClass('::Ice::Instrumentation::ChildInvocationObserver', '\\Ice\\Instrumentation\\ChildInvocationObserver', -1, false, true, null, null);
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_RemoteObserver;
    interface RemoteObserver extends \Ice\Instrumentation\ChildInvocationObserver
    {
    }
    $Ice_Instrumentation__t_RemoteObserver = IcePHP_defineClass('::Ice::Instrumentation::RemoteObserver', '\\Ice\\Instrumentation\\RemoteObserver', -1, false, true, null, null);
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_CollocatedObserver;
    interface CollocatedObserver extends \Ice\Instrumentation\ChildInvocationObserver
    {
    }
    $Ice_Instrumentation__t_CollocatedObserver = IcePHP_defineClass('::Ice::Instrumentation::CollocatedObserver', '\\Ice\\Instrumentation\\CollocatedObserver', -1, false, true, null, null);
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_InvocationObserver;
    interface InvocationObserver extends \Ice\Instrumentation\Observer
    {
        public function retried();
        public function userException();
        public function getRemoteObserver($con, $endpt, $requestId, $size);
        public function getCollocatedObserver($adapter, $requestId, $size);
    }
    $Ice_Instrumentation__t_InvocationObserver = IcePHP_defineClass('::Ice::Instrumentation::InvocationObserver', '\\Ice\\Instrumentation\\InvocationObserver', -1, false, true, null, null);
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_ObserverUpdater;
    interface ObserverUpdater
    {
        public function updateConnectionObservers();
        public function updateThreadObservers();
    }
    $Ice_Instrumentation__t_ObserverUpdater = IcePHP_defineClass('::Ice::Instrumentation::ObserverUpdater', '\\Ice\\Instrumentation\\ObserverUpdater', -1, false, true, null, null);
}

namespace Ice\Instrumentation
{
    global $Ice_Instrumentation__t_CommunicatorObserver;
    interface CommunicatorObserver
    {
        public function getConnectionEstablishmentObserver($endpt, $connector);
        public function getEndpointLookupObserver($endpt);
        public function getConnectionObserver($c, $e, $s, $o);
        public function getThreadObserver($parent, $id, $s, $o);
        public function getInvocationObserver($prx, $operation, $ctx);
        public function getDispatchObserver($c, $size);
        public function setObserverUpdater($updater);
    }
    $Ice_Instrumentation__t_CommunicatorObserver = IcePHP_defineClass('::Ice::Instrumentation::CommunicatorObserver', '\\Ice\\Instrumentation\\CommunicatorObserver', -1, false, true, null, null);
}
?>
