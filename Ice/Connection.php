<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `Connection.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/ObjectAdapterF.php';
    require_once 'Ice/Identity.php';
    require_once 'Ice/Endpoint.php';
}

namespace Ice
{
    global $Ice__t_CompressBatch;
    class CompressBatch
    {
        const Yes = 0;
        const No = 1;
        const BasedOnProxy = 2;
    }

    $Ice__t_CompressBatch = IcePHP_defineEnum('::Ice::CompressBatch', array('Yes', 0, 'No', 1, 'BasedOnProxy', 2));
}

namespace Ice
{
    global $Ice__t_Connection;
    if(!isset($Ice__t_Connection))
    {
        $Ice__t_Connection = IcePHP_declareClass('::Ice::Connection');
    }
}

namespace Ice
{
    global $Ice__t_CloseCallback;
    interface CloseCallback
    {
        public function closed($con);
    }
    $Ice__t_CloseCallback = IcePHP_defineClass('::Ice::CloseCallback', '\\Ice\\CloseCallback', -1, false, true, null, null);
}

namespace Ice
{
    global $Ice__t_HeartbeatCallback;
    interface HeartbeatCallback
    {
        public function heartbeat($con);
    }
    $Ice__t_HeartbeatCallback = IcePHP_defineClass('::Ice::HeartbeatCallback', '\\Ice\\HeartbeatCallback', -1, false, true, null, null);
}

namespace Ice
{
    global $Ice__t_ACMClose;
    class ACMClose
    {
        const CloseOff = 0;
        const CloseOnIdle = 1;
        const CloseOnInvocation = 2;
        const CloseOnInvocationAndIdle = 3;
        const CloseOnIdleForceful = 4;
    }

    $Ice__t_ACMClose = IcePHP_defineEnum('::Ice::ACMClose', array('CloseOff', 0, 'CloseOnIdle', 1, 'CloseOnInvocation', 2, 'CloseOnInvocationAndIdle', 3, 'CloseOnIdleForceful', 4));
}

namespace Ice
{
    global $Ice__t_ACMHeartbeat;
    class ACMHeartbeat
    {
        const HeartbeatOff = 0;
        const HeartbeatOnDispatch = 1;
        const HeartbeatOnIdle = 2;
        const HeartbeatAlways = 3;
    }

    $Ice__t_ACMHeartbeat = IcePHP_defineEnum('::Ice::ACMHeartbeat', array('HeartbeatOff', 0, 'HeartbeatOnDispatch', 1, 'HeartbeatOnIdle', 2, 'HeartbeatAlways', 3));
}

namespace Ice
{
    global $Ice__t_ACM;
    class ACM
    {
        public function __construct($timeout=0, $close=\Ice\ACMClose::CloseOff, $heartbeat=\Ice\ACMHeartbeat::HeartbeatOff)
        {
            $this->timeout = $timeout;
            $this->close = $close;
            $this->heartbeat = $heartbeat;
        }

        public function __toString()
        {
            global $Ice__t_ACM;
            return IcePHP_stringify($this, $Ice__t_ACM);
        }

        public $timeout;
        public $close;
        public $heartbeat;
    }

    global $IcePHP__t_int;
    global $Ice__t_ACMClose;
    global $Ice__t_ACMHeartbeat;
    $Ice__t_ACM = IcePHP_defineStruct('::Ice::ACM', '\\Ice\\ACM', array(
        array('timeout', $IcePHP__t_int),
        array('close', $Ice__t_ACMClose),
        array('heartbeat', $Ice__t_ACMHeartbeat)));
}

namespace Ice
{
    global $Ice__t_ConnectionClose;
    class ConnectionClose
    {
        const Forcefully = 0;
        const Gracefully = 1;
        const GracefullyWithWait = 2;
    }

    $Ice__t_ConnectionClose = IcePHP_defineEnum('::Ice::ConnectionClose', array('Forcefully', 0, 'Gracefully', 1, 'GracefullyWithWait', 2));
}
?>
